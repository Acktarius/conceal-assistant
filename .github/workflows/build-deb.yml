name: Build Debian Package

on:
  release:
    types: [created, published, released]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.2.4)'
        required: true
        default: 'v1.2.4'

jobs:
  build-deb:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Create Debian package structure
        run: |
          # Set version based on trigger type
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "Building package for version: $VERSION"
          VERSION_NO_V=${VERSION#v}
          PACKAGE_NAME="conceal-assistant"
          
          # Create package directory structure
          mkdir -p debian-package/DEBIAN
          mkdir -p debian-package/opt/conceal-assistant
          mkdir -p debian-package/opt/conceal-toolbox
          mkdir -p debian-package/etc/systemd/system
          
          # Create control file
          {
            echo "Package: conceal-assistant"
            echo "Priority: optional"
            echo "Maintainer: Acktarius <acktarius@protonmail.com>"
            echo "Homepage: https://github.com/acktarius/conceal-assistant/"
            echo "Depends: dbus-x11, lm-sensors, nodejs (>=18.17.1), curl, zenity"
            echo "Architecture: amd64"
            echo "Version: $VERSION_NO_V"
            echo "Description: Conceal assistant checks the status of node and mining services."
            echo " (ccx-guardian.service) and (ccx-mining.service)"
            echo " It allows to activate or deactivate them."
            echo " Also gives the option to modify mining settings and switch miner,"
            echo " Access key parameters of the guardian or update the Core."
          } > debian-package/DEBIAN/control
          
          chmod 644 debian-package/DEBIAN/control
          
          # Copy application files to /opt/conceal-assistant
          find . -maxdepth 1 ! -name 'debian-package' ! -name '.' -exec cp -r {} debian-package/opt/conceal-assistant/ \;
          
          # Copy service file directly to systemd directory
          cp data/ccx-assistant.service.template debian-package/etc/systemd/system/ccx-assistant.service
          
          # Create launcher script
          cat > debian-package/opt/conceal-toolbox/ccx-assistant_firefox.sh << 'EOLAUNCHER'
#!/bin/bash
wdir="/opt/conceal-assistant"

function assistant_to () {
cd $wdir
gnome-terminal --geometry=100x15 --title=Conceal_Assistant -- bash -c "sudo nodemon server.js" &
sleep 8
firefox "http://localhost:3500"
}
electron() {
npm exec electron ${wdir}/electron/main.js
}

if [[ ! -f /etc/systemd/system/ccx-assistant.service ]]; then
        if zenity --question --title "no service installed" --width 400 --height 80 --text "launch from terminal instead?"
        then
                if [[ ! -d $wdir ]]; then
                        if zenity --question --title "Conceal Assistant couldn't be find" --width 400 --height 80 --text "Would you like to visit Conceal-assistant Github page? or locate a specific folder" --ok-label="Yes" --cancel-label="Locate"
                        then
                        firefox "https://github.com/acktarius"
                        sleep 1
                        exit
                        else
                        wdir=$(zenity --file-selection --title="Locate Conceal-assistant Directory" --width 400 --height 250 --directory)
                        case $? in
                                0)
                                if [[ ! -f $wdir/server.js ]]; then
                                zenity --info --title "error" --width 400 --height 80 --text "server.js not here !"
                                exit
                                else
                                assistant_to
                                exit
                                fi
                                ;;
                                *)
                                exit
                                ;;
                        esac
                        fi
                else
                assistant_to
                exit
                fi
        fi
else
    actif=$(systemctl status ccx-assistant | head -n 5 | grep -c "Active: a")
    case $actif in
        0)
        answer=$(zenity --title "Service not active, choose option" --width 400 --height 220 --list --radiolist --column Selection --column answer FALSE start_and_go FALSE terminal)
                case $answer in
                start_and_go)
        systemctl restart ccx-assistant.service
        sleep 1
        firefox "http://localhost:3500"
        exit
                ;;
                terminal)
        sleep 2
        assistant_to
                exit
                ;;
                *)
                exit
                ;;
                esac
        ;;
        1)
        answer=$(zenity --title "Service is Active, choose option" --width 400 --height 220 --list --radiolist --column Selection --column answer TRUE Default FALSE Compact FALSE Terminal FALSE Stop_Service)
                case $answer in
                Default)
        firefox "http://localhost:3500"
        exit
                ;;
                Compact)
        electron
                ;;
                Terminal)
        systemctl stop ccx-assistant.service
        sleep 2
        assistant_to
                exit
                ;;
                Stop_Service)
        systemctl stop ccx-assistant.service
                ;;
                *)
                exit
                ;;
                esac
        ;;
        *)
        exit
        ;;
    esac
fi
EOLAUNCHER
          chmod +x debian-package/opt/conceal-toolbox/ccx-assistant_firefox.sh

          # Create copyright file
          cat > debian-package/DEBIAN/copyright << 'EOCOPYRIGHT'
This work included in this package was made by:
    Acktarius <acktarius@protonmail.com>
    
Copyrights:    
    Copyright (C) 2022-2024 Acktarius <acktarius@protonmail.com>

This Ubuntu package is 
    Copyright (C) 2022-2025 Acktarius <acktarius@protonmail.com>

and is licence under BDS3, see below:

Licence:

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
EOCOPYRIGHT

          # Create prerm script
          cat > debian-package/DEBIAN/prerm << 'EOPRERM'
#!/bin/bash
echo "Stopping ccx-assistant service..."

if [ -f /etc/systemd/system/ccx-assistant.service ]; then
    systemctl stop ccx-assistant
    systemctl disable ccx-assistant
fi
EOPRERM
          chmod +x debian-package/DEBIAN/prerm

          # Create postrm script
          cat > debian-package/DEBIAN/postrm << 'EOPOSTRM'
#!/bin/bash
echo "Cleaning up ccx-assistant files..."

# Remove service file and reload systemd
if [ -f /etc/systemd/system/ccx-assistant.service ]; then
    rm /etc/systemd/system/ccx-assistant.service
    systemctl daemon-reload
fi

# Clean up user-specific files
# Get the user who initiated the removal
SUDO_USER="${SUDO_USER:-$USER}"
REAL_USER=$(who | awk '{print $1}' | head -n1)
INSTALL_USER=${SUDO_USER:-$REAL_USER}

# Remove icon and desktop entry
if [ -f "/home/$INSTALL_USER/.icons/cham.png" ]; then
    rm "/home/$INSTALL_USER/.icons/cham.png"
fi

if [ -f "/home/$INSTALL_USER/.local/share/applications/ccx-assistant_firefox.desktop" ]; then
    rm "/home/$INSTALL_USER/.local/share/applications/ccx-assistant_firefox.desktop"
fi

# Clean up application directories
if [ -d "/opt/conceal-assistant" ]; then
    rm -rf "/opt/conceal-assistant"
fi

if [ -d "/opt/conceal-toolbox" ]; then
    rm -rf "/opt/conceal-toolbox"
fi
EOPOSTRM
          chmod +x debian-package/DEBIAN/postrm
          
          # Create preinst script
          cat > debian-package/DEBIAN/preinst << 'EOPREINST'
#!/bin/bash

# Update npm to latest version
echo "Updating npm to latest version..."
sudo npm install -g npm@latest

#nodemon
if [ ! -f /bin/nodemon ]; then
sudo npm i -g nodemon
else
ndmv=$(nodemon --version)
echo "nodemon version $ndmv"
comp_ndmv=$(echo -e "$ndmv\n2.0.22" | sort -V | head -n1)
if [ "$ndmv" != "2.0.22" ]; then
if [[ "$comp_ndmv" = "$ndmv" ]]; then
npm i -g nodemon
echo "nodemon updated"
else
echo "nodemon install version is more recent"
fi
else
echo "nodemon version match"
fi
fi
EOPREINST
          chmod +x debian-package/DEBIAN/preinst
          
          # Create postinst script
          cat > debian-package/DEBIAN/postinst << 'EOPOSTINST'
#!/bin/bash
cd /opt/conceal-assistant
npm install

# Get the user who initiated the installation
SUDO_USER="${SUDO_USER:-$USER}"
REAL_USER=$(who | awk '{print $1}' | head -n1)
INSTALL_USER=${SUDO_USER:-$REAL_USER}

# Create user's local directories if they don't exist
sudo -u $INSTALL_USER mkdir -p /home/$INSTALL_USER/.local/share/applications
sudo -u $INSTALL_USER mkdir -p /home/$INSTALL_USER/.icons

# Install icon for the installing user
sudo -u $INSTALL_USER cp /opt/conceal-assistant/launcher/icons/cham.png /home/$INSTALL_USER/.icons/

# Install desktop entry for the installing user only
sudo -u $INSTALL_USER cat > "/home/$INSTALL_USER/.local/share/applications/ccx-assistant_firefox.desktop" << 'EODESKTOP'
[Desktop Entry]
Type=Application
Name=CCX Assistant
Exec=/opt/conceal-toolbox/ccx-assistant_firefox.sh
Icon=cham.png
Hidden=false
NoDisplay=false
Terminal=false
Comment=open Assistant in Firefox 
X-GNOME-Autostart-enabled=true
EODESKTOP

# Setup service
systemctl daemon-reload
systemctl enable ccx-assistant.service
systemctl start ccx-assistant.service
EOPOSTINST
          chmod +x debian-package/DEBIAN/postinst

      - name: Build Debian package
        run: |
          # Set version based on trigger type
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "Building package for version: $VERSION"
          VERSION_NO_V=${VERSION#v}
          dpkg-deb --build debian-package conceal-assistant_${VERSION_NO_V}_all.deb
          
          # Generate checksums
          sha256sum conceal-assistant_${VERSION_NO_V}_all.deb > conceal-assistant_${VERSION_NO_V}_all.deb.sha256
          md5sum conceal-assistant_${VERSION_NO_V}_all.deb > conceal-assistant_${VERSION_NO_V}_all.deb.md5

      - name: Upload Debian package to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./conceal-assistant_${{ github.event.release.tag_name }}_all.deb
          asset_name: conceal-assistant_${{ github.event.release.tag_name }}_all.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload SHA256 checksum
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./conceal-assistant_${{ github.event.release.tag_name }}_all.deb.sha256
          asset_name: conceal-assistant_${{ github.event.release.tag_name }}_all.deb.sha256
          asset_content_type: text/plain

      - name: Upload MD5 checksum
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./conceal-assistant_${{ github.event.release.tag_name }}_all.deb.md5
          asset_name: conceal-assistant_${{ github.event.release.tag_name }}_all.deb.md5
          asset_content_type: text/plain

      - name: Upload artifacts
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: debian-package
          path: |
            ./conceal-assistant_*.deb
            ./conceal-assistant_*.deb.sha256
            ./conceal-assistant_*.deb.md5 